package sk.itsovy.petrova.queue;

import sk.itsovy.petrova.exceptions.OverFlowException;
import sk.itsovy.petrova.exceptions.UnderFlowException;

import java.util.ArrayList;
import java.util.List;

public class Queue<T> {

    private int size;
    private int capacity;
    private List<T> list;

    public Queue(int capacity) {
        if (capacity <= 0) {
            System.out.println("Maximum capacity is 5");
        } else {
            this.capacity = capacity;
            list = new ArrayList<>();
            this.size = size;
        }
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return capacity == 0;
    }

    public int getCapacity() {
        return capacity;
    }

    public int getSize() {
        return size;
    }

    public void enqueue(T obj) throws OverFlowException {
        if (obj == null) {
            return;
        } else if (!isFull()) {
            list.add(obj);
            size++;
        } else {
            throw new OverFlowException("Queue is full");
        }
    }

    public T getFront() {
        if(isEmpty()){
            return null;
        }else{
            return list.get(0);
        }

    }

    public void dequeue() throws UnderFlowException {
        if(isEmpty()){
            throw new UnderFlowException ("A queue is empty");
        }
        else {
            list.remove(0);
            size--;
        }
    }

    public T getFrontAndDequeue() throws UnderFlowException {
        T temp = getFront();
        dequeue();
        return temp;
    }

   public void printQueue(){
        for(int i=0;i<size;i++){
            System.out.println(list.get(i));
        }
   }
}
